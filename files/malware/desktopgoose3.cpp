#include <SDL2/SDL.h>
#include <X11/Xlib.h>
#include <X11/extensions/XTest.h>
#include <unistd.h>
#include <iostream>
#include <cstdlib>
#include <ctime>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const int DUCK_WIDTH = 64;
const int DUCK_HEIGHT = 64;
const int FRAMES_PER_SECOND = 10;  // Duck animation speed

// Function to load the duck sprite sheet (use your own duck image here)
SDL_Texture* load_texture(const char* path, SDL_Renderer* renderer) {
    SDL_Surface* temp_surface = SDL_LoadBMP(path);  // Load BMP for simplicity
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, temp_surface);
    SDL_FreeSurface(temp_surface);
    return texture;
}

// Function to move mouse randomly (using X11/XTest)
void grab_mouse(Display* display, int screen_width, int screen_height) {
    for (int i = 0; i < 10; ++i) {
        int x = rand() % screen_width;
        int y = rand() % screen_height;
        XTestFakeMotionEvent(display, DefaultScreen(display), x, y, 0);  // Move mouse
        XFlush(display);
        usleep(500000);  // Wait for 500ms
    }
}

int main(int argc, char* argv[]) {
    srand(static_cast<unsigned int>(time(0)));

    // Initialize SDL for the duck animation
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Linux Duck", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    SDL_Texture* duck_texture = load_texture("duck_spritesheet.bmp", renderer);  // Replace with your duck sprite
    if (!duck_texture) {
        std::cerr << "Failed to load duck texture! SDL_Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    // Duck animation frames (assuming a sprite sheet with 4 frames horizontally)
    SDL_Rect src_rect = { 0, 0, DUCK_WIDTH, DUCK_HEIGHT };
    SDL_Rect dest_rect = { SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, DUCK_WIDTH, DUCK_HEIGHT };

    int frame = 0;

    // Open X11 display for desktop interaction
    Display* display = XOpenDisplay(NULL);
    if (display == NULL) {
        std::cerr << "Unable to open X11 display.\n";
        return 1;
    }

    int screen_width = DisplayWidth(display, DefaultScreen(display));
    int screen_height = DisplayHeight(display, DefaultScreen(display));

    bool running = true;
    SDL_Event event;

    // Main loop: move the duck and interact with desktop
    while (running) {
        while (SDL_PollEvent(&event) != 0) {
            if (event.type == SDL_QUIT) {
                running = false;
            }
        }

        // Animate the duck (walking animation from sprite sheet)
        src_rect.x = (frame / FRAMES_PER_SECOND) * DUCK_WIDTH;
        frame = (frame + 1) % (4 * FRAMES_PER_SECOND);  // Assuming 4 frames for animation

        // Clear screen and render the duck
        SDL_RenderClear(renderer);
        SDL_RenderCopy(renderer, duck_texture, &src_rect, &dest_rect);
        SDL_RenderPresent(renderer);

        // Randomly move the mouse on the actual desktop
        grab_mouse(display, screen_width, screen_height);

        usleep(100000);  // Sleep for 100ms
    }

    // Cleanup
    XCloseDisplay(display);
    SDL_DestroyTexture(duck_texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}

