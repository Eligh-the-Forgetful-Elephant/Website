#include <SFML/Graphics.hpp>
#include <iostream>
#include <cstdlib>
#include <ctime>

// Function to move goose randomly on the screen
void moveGoose(sf::Sprite& goose, sf::RenderWindow& window) {
    sf::Vector2u windowSize = window.getSize();
    sf::Vector2f position = goose.getPosition();

    // Randomly move the goose
    int dx = (rand() % 7) - 3;  // Random movement between -3 and 3
    int dy = (rand() % 7) - 3;

    position.x += dx;
    position.y += dy;

    // Keep goose within window bounds
    if (position.x < 0) position.x = 0;
    if (position.y < 0) position.y = 0;
    if (position.x > windowSize.x - goose.getGlobalBounds().width)
        position.x = windowSize.x - goose.getGlobalBounds().width;
    if (position.y > windowSize.y - goose.getGlobalBounds().height)
        position.y = windowSize.y - goose.getGlobalBounds().height;

    goose.setPosition(position);
}

// Placeholder for reverse engineering challenge
bool reverseEngineeringChallenge() {
    // Secret logic to determine if the goose should reveal the flag
    // The reverse engineer needs to figure out how to trigger this
    // For now, let's pretend they need to change this hardcoded value.
    int secretValue = 1234;

    // If reverse-engineered, secretValue might be patched to 1337
    if (secretValue == 1337) {
        return true; // Reveal the flag
    }
    return false;
}

int main() {
    srand(static_cast<unsigned int>(time(0)));  // Seed for random movement

    // Create the window
    sf::RenderWindow window(sf::VideoMode(800, 600), "Goose Challenge");

    // Load the goose image
    sf::Texture gooseTexture;
    if (!gooseTexture.loadFromFile("goose.png")) {
        std::cerr << "Error loading goose image!" << std::endl;
        return 1;
    }

    // Create the goose sprite
    sf::Sprite goose;
    goose.setTexture(gooseTexture);
    goose.setPosition(400, 300);  // Start position

    // Create a font and text object for the flag
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        std::cerr << "Error loading font!" << std::endl;
        return 1;
    }

    sf::Text flagText;
    flagText.setFont(font);
    flagText.setString("C2{FLAG-REVEALED}");
    flagText.setCharacterSize(50);
    flagText.setFillColor(sf::Color::Red);
    flagText.setPosition(200, 250);  // Position where flag will be displayed

    // Main loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Move the goose
        moveGoose(goose, window);

        // Clear the window
        window.clear(sf::Color::White);

        // Draw the goose
        window.draw(goose);

        // Reverse engineering challenge: reveal flag if condition met
        if (reverseEngineeringChallenge()) {
            window.draw(flagText);  // Draw the flag on the screen
        }

        // Display the window content
        window.display();
    }

    return 0;
}

