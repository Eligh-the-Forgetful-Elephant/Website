#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <iostream>
#include <unistd.h>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const int DUCK_WIDTH = 64;   // Width of each duck frame
const int DUCK_HEIGHT = 64;  // Height of each duck frame
const int FRAMES_PER_SECOND = 10;  // Speed of animation
const int TOTAL_FRAMES = 4;  // Number of frames in the sprite sheet

// Function to load the sprite sheet
SDL_Texture* load_texture(const char* path, SDL_Renderer* renderer) {
    SDL_Surface* temp_surface = IMG_Load(path);  // Load PNG for transparency support
    if (!temp_surface) {
        std::cerr << "Failed to load image: " << path << " SDL_Error: " << IMG_GetError() << std::endl;
        return nullptr;
    }
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, temp_surface);
    SDL_FreeSurface(temp_surface);
    return texture;
}

int main(int argc, char* argv[]) {
    // Initialize SDL2 and SDL_image
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        return 1;
    }
    if (!(IMG_Init(IMG_INIT_PNG) & IMG_INIT_PNG)) {
        std::cerr << "SDL_image could not initialize! SDL_image Error: " << IMG_GetError() << std::endl;
        return 1;
    }

    // Create SDL window and renderer
    SDL_Window* window = SDL_CreateWindow("Linux Duck", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    // Load the duck sprite sheet (assumed to be 256x64 PNG for 4 frames of 64x64)
    SDL_Texture* duck_texture = load_texture("duck_spritesheet.png", renderer);
    if (!duck_texture) {
        return 1;
    }

    // Duck animation frames (sprite sheet layout)
    SDL_Rect src_rect = { 0, 0, DUCK_WIDTH, DUCK_HEIGHT };  // Source rectangle to grab each frame
    SDL_Rect dest_rect = { SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, DUCK_WIDTH, DUCK_HEIGHT };  // Position to draw the duck on screen

    int frame = 0;
    bool running = true;
    SDL_Event event;

    // Main loop: animate and move the duck
    while (running) {
        while (SDL_PollEvent(&event) != 0) {
            if (event.type == SDL_QUIT) {
                running = false;
            }
        }

        // Animate duck (loop through sprite sheet)
        src_rect.x = (frame / FRAMES_PER_SECOND) * DUCK_WIDTH;
        frame = (frame + 1) % (TOTAL_FRAMES * FRAMES_PER_SECOND);

        // Clear screen and render the duck
        SDL_RenderClear(renderer);
        SDL_RenderCopy(renderer, duck_texture, &src_rect, &dest_rect);
        SDL_RenderPresent(renderer);

        usleep(100000);  // Delay for 100ms to control animation speed
    }

    // Clean up
    SDL_DestroyTexture(duck_texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    IMG_Quit();
    SDL_Quit();

    return 0;
}

