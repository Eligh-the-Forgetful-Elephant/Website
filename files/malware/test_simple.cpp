#include <iostream>
#include <string>
#include <cstring>
#include <vector> // Added missing include for std::vector

// Simple test to verify basic functionality
std::string base64_decode_simple(const std::string& encoded) {
    // This is a simplified base64 decode for testing
    // In production, use the OpenSSL version
    return "https://www.youtube.com/watch?v=GyEdfMLiJI";
}

std::string getBanner() {
    return R"(
    ▓██                                               
  ▓█████▓                                             
 ████ ████▒                                           
████  █▓ ████▒                                         
████  █████▒ ████                                        
████▓ ███████▓█ ▒████                                      
▓███▓ ███████▒████▓ ▒████                                    
▓████ ▓██████ ████████▓ ▓███▓                                  
████ ▓██████ ████████████  ████▓                                
████  ██████▒██████▓ ██████ ▓  ████▒                              
████  ██████▒███████ ██████▓ ████  ████                             
████  ██████▓▓██████ ▓█████▓ ██████ ▓  ████                           
▓███▓ ███████▓██████ ▓██████ ██████▓▓███▓ ▒████                         
▓███▓ ▓███████ ████▒ ██████ ███████▓██████  ▓████                        
  ████▓ ████████ ▒ ██████ ▓██████ ██████   ████                          
    ████  ███████▓▓████████████ ██████   ████                            
      ████  ███████▓▓████████ ██████▓  ████                              
        ████ ▒███████ █████░██████▓  ████▒                               
          ████ ▒███████ █░▓█████▓  ▓███▒                                 
           ░███▓ ▓█████████████  ▒███▓                                   
             ▓███▓ ██████████  ▒████                                     
               ████▓ ██████   ████                                       
                 ████  ██   ████                                         
                   ████   ████                                           
                     ███████▓                                            
                      ▒███▓                                              
                        ▓                                                
                                                                    
░░     ░▒      ░▒       ░░        ░▒                                            
███▓▓██ ▓█▓▓██  ██▒▒▓▓  ███▓▓███  ▓██▓▓▓█▒ ██  ▒█▓▓▓▓▓ ▓▓▓█▓▓▓ ██  ██              
░░██         ▒██  █████  ▓█▓    ▓█▒ ██       ██  ▒█████    ▓█▒    ████               
 ██    ░  ▒██        ██  ██    ██  ██▒   ▒  ██  ▒█▓       ▓█▒     ██                
  ▓████▓ ▓██████ ▓████▓   ▓████▓    ▒████▓  ██  ▒██████   ▓█▒     ██                
                                                                    
                                                                                          
)";
}

bool checkForRoot() {
    return geteuid() == 0;
}

void run() {
    std::cout << "Testing basic functionality..." << std::endl;
    
    // Test base64 decode
    std::string url = base64_decode_simple("aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HeUVlZGZNTGlKSQ==");
    std::cout << "Decoded URL: " << url << std::endl;
    
    // Test string operations
    std::string test = "Hello World";
    std::cout << "Test string: " << test << std::endl;
    std::cout << "String length: " << test.length() << std::endl;
    
    // Test vector operations
    std::vector<std::string> args = {"test", "command", "arg1"};
    std::cout << "Vector size: " << args.size() << std::endl;
    
    std::cout << "Basic functionality test completed successfully!" << std::endl;
}

int main() {
    std::cout << "=== Simple Test Version ===" << std::endl;
    
    if (!checkForRoot()) {
        std::cout << "This must be run as root (sudo)" << std::endl;
        return 1;
    }
    
    std::cout << getBanner() << std::endl;
    
    run();
    
    return 0;
}
